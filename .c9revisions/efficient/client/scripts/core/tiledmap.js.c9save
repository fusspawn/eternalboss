{"ts":1350856239070,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"function TiledMap(url) {\n    client_data.scene.make_scene_object.call(client_data.scene, this);\n    this.isDrawable = true;\n    this.isUpdateable = true;\n    \n    this.map = null;\n    this.loaded = false;\n    this.loading = 0;\n    this.sprite_sheets = Array();\n    this.global_mappings = {};\n    \n    client_data.resources.get_map(url, function(map_json) {\n        this.map = map_json;\n        console.log(this.map);\n        this.process_sprite_sheets();    \n    }, this);\n    \n    this.process_sprite_sheets = function()\n    {\n        for(var index in this.map.tilesets) \n        {\n            var ts = this.map.tilesets[index];\n            var sheet_mappings = this.create_mappings(ts);\n            var sprite = new SpriteSheet(ts.image, sheet_mappings);\n            \n            sprite.tilewidth = ts.tilewidth;\n            sprite.tileheight = ts.tileheight;\n            sprite.debug_color = \"rgba(\"+Math.floor(Math.random() * 255)+ \",\" + \n                                        Math.floor(Math.random() * 255)+ \",\" +\n                                        Math.floor(Math.random() * 255)+ \",255)\";\n            sprite.firstgid = ts.firstgid;\n            this.update_global_mappings(sprite, sheet_mappings);\n            this.sprite_sheets.push(sprite);\n        }       \n    };\n    \n    this.update_global_mappings = function(sprite, mappings) {\n        for(var i in mappings) {\n            mappings[i].sheet = sprite;\n            this.global_mappings[i] = mappings[i];\n            this.global_mappings[i].w  = sprite.width;\n            this.global_mappings[i].h  = sprite.height;\n        }\n    };\n    \n    this.get_correct_sheet = function(id) {\n        return this.global_mappings[id].sheet;\n        \n        \n        var last_ss = null;\n        for(var i = 0; i < this.sprite_sheets.length; i++) {\n            var ss = this.sprite_sheets[i];\n            if(last_ss == null)\n                last_ss = ss;\n                \n            if(ss.firstgid < id && ss.firstgid > last_ss.firstgid)\n                last_ss = ss;\n        }\n        \n        \n        return last_ss;\n    };\n    \n    this.create_mappings = function(ts) {\n        var sprite_width = ts.tilewidth;\n        var sprite_height = ts.tileheight;\n        \n        var x_count = Math.floor(ts.imagewidth / sprite_width);\n        var y_count = Math.floor(ts.imageheight / sprite_height);\n        \n        console.log(\"X count: \", x_count, \" Y Count: \", y_count);\n        \n        var mapping = {};\n        var gid = ts.firstgid;\n        var _len = x_count * y_count;\n        \n        for(var i = 0; i < _len; i++) {\n            var x = i % x_count;\n            var y = i / x_count | 0;\n            mapping[gid + i] = {\n                x: x * sprite_width,\n                y: y * sprite_height,\n            };\n        }\n        \n        return mapping;\n    }\n\n    this.update = function(delta) {\n        if(this.map == null)\n            return;\n    };\n    \n    this.draw = function(delta) {\n        if(this.map == null)\n            return;\n        \n        for(var i = 0; i < this.map.layers.length; i++)\n            this.draw_layer(delta, i);\n    };\n    \n    this.get_safe_key = function(path) {\n        var copy = path;\n        copy.replace(\"/\", \"_\");\n        copy.replace(\"\\\\\", \"_\");\n        copy.replace(\".\", \"_\");\n        copy.replace(\":\", \"_\");\n        return copy;\n    };\n    \n    this.draw_layer = function(delta, id) {\n        var layer = this.map.layers[id];\n        for(var index = 0; index < layer.data.length; index++) {\n            var tid = layer.data[index];\n            var x = index % layer.width;\n            var y = index / layer.width | 0; \n               \n            if(tid > 0)\n            {\n                var ss = this.get_correct_sheet(tid);\n                    ss.current_frame = tid;\n                    ss.width = ss.tilewidth;\n                    ss.height = ss.tileheight;\n                    \n                    var _x = x * this.map.tilewidth;\n                    var _y = y * this.map.tileheight;\n                    \n                    ss.draw_at(_x, _y, delta);\n                    \n                    client_data.renderer.draw_debug_text(x * this.map.tilewidth, y * this.map.tileheight,\n                        tid, ss.debug_color);\n            }\n            \n            client_data.renderer.draw_debug_box(x * this.map.tilewidth, y * this.map.tileheight, \n                    this.map.tilewidth, this.map.tileheight, \"purple\");\n        }\n    }; \n}"]],"start1":0,"start2":0,"length1":0,"length2":4455}]],"length":4455}
{"contributors":[],"silentsave":false,"ts":1350856248052,"patch":[[{"diffs":[[0," = {};\n    \n"],[1,"    \n    \n"],[0,"    client_d"]],"start1":285,"start2":285,"length1":24,"length2":34}]],"length":4465,"saved":false}
{"ts":1350856299480,"patch":[[{"diffs":[[0,"};\n    \n    "],[1,"this.physics_data = {};"],[0,"\n    \n    cl"]],"start1":289,"start2":289,"length1":24,"length2":47}]],"length":4488,"saved":false}
{"ts":1350856827099,"patch":[[{"diffs":[[0,"   \n"],[-1,"    this.physics_data = {};\n"],[0,"    "]],"start1":293,"start2":293,"length1":36,"length2":8}]],"length":4460,"saved":false}
{"ts":1350856873030,"patch":[[{"diffs":[[0,"et;\n"],[-1,"        \n        \n        var last_ss = null;\n        for(var i = 0; i < this.sprite_sheets.length; i++) {\n            var ss = this.sprite_sheets[i];\n            if(last_ss == null)\n                last_ss = ss;\n                \n            if(ss.firstgid < id && ss.firstgid > last_ss.firstgid)\n                last_ss = ss;\n        }\n        \n        \n        return last_ss;\n"],[0,"    "]],"start1":1698,"start2":1698,"length1":387,"length2":8}]],"length":4081,"saved":false}
{"ts":1350857329959,"patch":[[{"diffs":[[0,"pings = {};\n"],[1,"    this.create_world_physics = true;\n"],[0,"    \n    \n  "]],"start1":280,"start2":280,"length1":24,"length2":62}]],"length":4119,"saved":false}
{"ts":1350857364455,"patch":[[{"diffs":[[0,"= true;\n    "],[1,"this.physics_layer_id = \"Walls\";"],[0,"\n    \n    cl"]],"start1":322,"start2":322,"length1":24,"length2":56}]],"length":4151,"saved":false}
{"ts":1350857558399,"patch":[[{"diffs":[[0,"ets();  "],[1,"\n"],[0,"  "],[1,"      if(this.create_world_physics) {\n            \n        };"],[0,"\n    }, "]],"start1":523,"start2":523,"length1":18,"length2":80}]],"length":4213,"saved":false}
{"ts":1350857583062,"patch":[[{"diffs":[[0,"this);\n    \n"],[1,"    this.create_physics_from_layer = function(layer) {};\n    \n"],[0,"    this.pro"]],"start1":603,"start2":603,"length1":24,"length2":86}]],"length":4275,"saved":false}
{"ts":1350857598887,"patch":[[{"diffs":[[0,"layer) {"],[1,"\n        \n    "],[0,"};\n    \n"]],"start1":661,"start2":661,"length1":16,"length2":30}]],"length":4289,"saved":false}
{"ts":1350857722034,"patch":[[{"diffs":[[0,"   \n    };\n    \n"],[1,"    this.get_layer = function(layer_name) {\n        for(var i in this.map.layers)\n            if(this.map.layers[i].name == layer_name)\n                return this.map.layers[i];\n    };\n    \n"],[0,"    this.process"]],"start1":675,"start2":675,"length1":32,"length2":223}]],"length":4480,"saved":false}
{"ts":1350857761584,"patch":[[{"diffs":[[0,") {\n            "],[1,"this.create_physics_from_layer(this.get_layer(\"Walls\"));"],[0,"\n        };\n    "]],"start1":568,"start2":568,"length1":32,"length2":88}]],"length":4536,"saved":false}
{"ts":1350857838166,"patch":[[{"diffs":[[0,") {\n        "],[1," for(var index = 0; index < layer.data.length; index++) {\n            var tid = layer.data[index];\n            var x = index % layer.width;\n            var y = index / layer.width | 0; \n               \n            if(tid > 0)\n            {\n                client_data.physics.make_physics_object({});\n            }\n        }"],[0,"\n    };\n    "]],"start1":722,"start2":722,"length1":24,"length2":348}]],"length":4860,"saved":false}
{"ts":1350858101231,"patch":[[{"diffs":[[0,"object({"],[-1,"}"],[1,"type: \"box\", object: {x:x, y:y, width: layer.tilewwidth, height: layer.tileheight}}, \"box\""],[0,");\n     "]],"start1":1023,"start2":1023,"length1":17,"length2":106}]],"length":4949,"saved":false}
{"ts":1350858131526,"patch":[[{"diffs":[[0,"er.tilew"],[-1,"w"],[0,"idth, he"]],"start1":1073,"start2":1073,"length1":17,"length2":16}]],"length":4948,"saved":false}
{"ts":1350858211986,"patch":[[{"diffs":[[0,"{x:x"],[-1,", y:y"],[1," * this.map.tilewidth, y:y * this.map.tileheight"],[0,", wi"]],"start1":1052,"start2":1052,"length1":13,"length2":56}]],"length":4991,"saved":false}
{"ts":1350859752230,"patch":[[{"diffs":[[0,"s_object"],[-1,"("],[1,".call(client_data.physics, "],[0,"{type: \""]],"start1":1021,"start2":1021,"length1":17,"length2":43}]],"length":5017,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350945390665,"patch":[[{"diffs":[[0,"physics,"],[1,"\n                   "],[0," {type: "]],"start1":1047,"start2":1047,"length1":16,"length2":36},{"diffs":[[0,"height, "],[1,"\n                    "],[0,"width: l"]],"start1":1144,"start2":1144,"length1":16,"length2":37}]],"length":5058,"saved":false}
{"ts":1350945858277,"patch":[[{"diffs":[[0,"ength; index++) "],[1,"\n         "],[0,"{\n            va"]],"start1":774,"start2":774,"length1":32,"length2":42}]],"length":5068,"saved":false}
{"contributors":[],"silentsave":false,"ts":1351021512156,"patch":[[{"diffs":[[0,"this);\n    \n"],[1,"    \n"],[0,"    this.cre"]],"start1":659,"start2":659,"length1":24,"length2":29},{"diffs":[[0,"on(layer) {\n"],[1,"         var sheet = this.get_spritesheet(layer);\n"],[0,"         for"]],"start1":719,"start2":719,"length1":24,"length2":74},{"diffs":[[0,"ndex++) "],[-1,"\n        "],[0," {\n     "]],"start1":837,"start2":837,"length1":25,"length2":16},{"diffs":[[0,"    "],[-1,"  {type: \"box\", object:"],[0," {x:"]],"start1":1126,"start2":1126,"length1":31,"length2":8},{"diffs":[[0," width: "],[-1,"layer"],[1,"sheet"],[0,".tilewid"]],"start1":1205,"start2":1205,"length1":21,"length2":21},{"diffs":[[0,"height: "],[-1,"layer"],[1,"sheet"],[0,".tilehei"]],"start1":1230,"start2":1230,"length1":21,"length2":21},{"diffs":[[0,"eheight}"],[-1,"}"],[0,", \"box\")"]],"start1":1247,"start2":1247,"length1":17,"length2":16},{"diffs":[[0,"yers[i];\n    };\n"],[1,"    this.get_spritesheet = function(layer_name) {\n        for(var i in this.map.tilesets)\n            if(this.map.tilesets[i].name == layer_name)\n                return this.map.tilesets[i];\n    };\n"],[0,"    \n    this.pr"]],"start1":1471,"start2":1471,"length1":32,"length2":230}]],"length":5288,"saved":false}
{"ts":1351021518913,"patch":[[{"diffs":[[0,"et(layer"],[1,".name"],[0,");\n     "]],"start1":770,"start2":770,"length1":16,"length2":21}]],"length":5293,"saved":false}
{"ts":1351021730888,"patch":[[{"diffs":[[0,"   \n            "],[1,"//"],[0,"client_data.rend"]],"start1":5100,"start2":5100,"length1":32,"length2":34},{"diffs":[[0,"            "],[1,"//"],[0,"      this.m"]],"start1":5206,"start2":5206,"length1":24,"length2":26}]],"length":5297,"saved":false}
{"contributors":[],"silentsave":false,"ts":1351025555302,"patch":[[{"diffs":[[0,"ject"],[-1,".call(client_data.physics,\n                   "],[1,"("],[0,"{x:x"]],"start1":1086,"start2":1086,"length1":54,"length2":9},{"diffs":[[0,"}, \"box\""],[1,", n"],[0,");\n     "]],"start1":1214,"start2":1214,"length1":16,"length2":19}]],"length":5255,"saved":false}
{"ts":1351025559464,"patch":[[{"diffs":[[0," \"box\", "],[-1,"n"],[1,"{}"],[0,");\n     "]],"start1":1216,"start2":1216,"length1":17,"length2":18}]],"length":5256,"saved":false}
