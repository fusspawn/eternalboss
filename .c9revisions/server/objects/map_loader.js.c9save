{"ts":1348960279546,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var astar = require(\"../astar\");\r\nvar arena_2 = require(\"./arena2.json\");\r\n\r\nvar MapLoader = function() {\r\n\tthis.map_object = {};\r\n\tthis.map_object.tile_layers = [];\r\n\tthis.map_object.collision_graph = null;\r\n\tthis.map_object.player_spawn = null;\r\n\tthis.map_object.mob_spawns = [];\r\n \r\n\tthis.init = function() {\r\n\t\tthis.load_in_tiles();\r\n\t};\r\n\r\n\tthis.load_in_tiles = function() {\r\n\t\tthis.map_object.height = arena_2.height;\r\n\t\tthis.map_object.width = arena_2.width;\r\n\t\tthis.map_object.tile_height = 16;\r\n\t\tthis.map_object.tile_width = 16;\r\n\t\tthis.map_object.tile_layers = [];\r\n\t\tthis.map_object.collision_graph = new astar.Graph(this.map_object.height);\r\n\r\n\t\tfor(var layer in arena_2.layers) {\r\n\t\t\tthis.map_object.tile_layers[layer] = {};\r\n\t\t\tthis.map_object.tile_layers[layer].width = arena_2.layers[layer].width;\r\n\t\t\tthis.map_object.tile_layers[layer].height = arena_2.layers[layer].height;\r\n\t\t\tthis.map_object.tile_layers[layer].name = arena_2.layers[layer].name;\r\n\r\n\t\t\tif(this.map_object.tile_layers[layer].name == \"CollisionLayer\") {\r\n\t\t\t\tconsole.log(\"found collision layer\");\r\n\t\t\t\tvar idx = 0;\r\n\t\t\t\tfor ( var y = 0 ; y <this.height; y++) {\r\n\t\t\t\t\tfor ( var x = 0; x <this.width; x++) {\r\n\t\t\t\t\t\tif(arena_2.layers[layer].data[idx++] > 0) {\r\n\t\t\t\t\t\t\tthis.map_object.collision_graph.nodes[x][y].set();\r\n\t\t\t\t\t\t\tconsole.log(\"wall\");\r\n\t\t\t\t\t\t} \r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif(this.map_object.tile_layers[layer].name == \"GameObjects\")\r\n\t\t\t{\r\n\t\t\t\t\r\n\r\n\t\t\t\tfor(var object_id in arena_2.layers[layer].objects) {\r\n\t\t\t\t\tvar object = arena_2.layers[layer].objects[object_id]; \r\n\t\t\t\t\t\r\n\t\t\t\t\tif(object.name == \"mainPlayer\") {\r\n\t\t\t\t\t\tconsole.log(\"found player_spawn: \" +  object.x  / this.map_object.tile_width + ':' + object.y / this.map_object.tile_width);\r\n\t\t\t\t\t\tthis.map_object.player_spawn = {x:object.x, y: object.y};\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t} \r\n\r\n\t\t\t\t\tif(object.name == \"mob\") {\r\n\t\t\t\t\t\tconsole.log('found mob spawn_point' + object.x  / this.map_object.tile_width + \":\" + object.y / this.map_object.tile_width);\r\n\t\t\t\t\t\tthis.map_object.mob_spawns.push({x: object.x, y: object.y });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar p_spawn = this.map_object.player_spawn;\r\n\t\t\tp_spawn.x = Math.floor(p_spawn.x / 16);\r\n\t\t\tp_spawn.y = Math.floor(p_spawn.y / 16);\r\n\r\n\t\t\tconsole.log(p_spawn);\r\n\t\t\tconsole.log(this.map_objects);\r\n\t\tvar to = this.map_object.collision_graph.nodes[p_spawn.x][p_spawn.y];\r\n\r\n\t\tfor(var mob_spawn in this.map_object.mob_spawns) {\r\n\r\n\t\t\tvar m_spawn = this.map_object.mob_spawns[mob_spawn];\r\n\t\t\tm_spawn.x = Math.floor(m_spawn.x / 16);\r\n\t\t\tm_spawn.y = Math.floor(m_spawn.y / 16);\r\n\t\t\tvar from = this.map_object.collision_graph.nodes[m_spawn.x][m_spawn.y];\r\n\t\t\tvar path = this.map_object.collision_graph.path(from.x, from.y, to.x, to.y, function(path){console.log(\"found_path of length: \" + path);});\r\n\t\t} \r\n\t};\r\n};\r\n\r\nmodule.exports = MapLoader;"]],"start1":0,"start2":0,"length1":0,"length2":2827}]],"length":2827}
